// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  email     String       @unique
  role      UserRole     @default(USER)
  password  String
  status    UserStatuses @default(ACTIVE)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  // relations
  UserDetails       UserDetail?
  Payments          Payment[]
  Subscriptions     Subscription[]
  UserSubscriptions UserSubscription[]
  authoredPosts     Post[]             @relation(name: "author")
  approvedPosts     Post[]             @relation(name: "approved_by_admin")
  Votes             Votes[]            @relation(name: "post_votes")
  Comments          Comments[]         @relation(name: "post_comments")

  @@map("user")
}

enum UserStatuses {
  ACTIVE
  BLOCKED

  @@map("user_status")
}

enum UserRole {
  USER
  PREMIUM_USER
  ADMIN

  @@map("user_role")
}

enum PostTypes {
  NORMAL
  PREMIUM

  @@map("post_type")
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VoteTypes {
  UPVOTE
  DOWNVOTE

  @@map("vote_types")
}

model UserDetail {
  id            String   @id @default(uuid())
  userId        String   @unique @map("user_id")
  name          String
  profilePhoto  String?  @map("profile_photo")
  contactNumber String?  @map("contact_number")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // relations
  user User @relation(fields: [userId], references: [id])

  @@map("user_details")
}

model Payment {
  pmId      String   @id @default(uuid()) @map("pm_id")
  userId    String   @map("user_id")
  paymentId String   @unique @map("payment_id")
  amount    Decimal
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // relation
  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Subscription {
  sId       String   @id @default(uuid()) @map("s_id")
  name      String
  fee       Decimal
  duration  Int      @default(30) // duration in days
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("subscriptions")
}

model UserSubscription {
  id             String   @id @default(uuid())
  subscriptionId String   @map("subscription_id")
  userId         String   @map("user_id")
  expiringAt     DateTime @map("expiring_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // relations
  User User? @relation(fields: [userId], references: [id])

  @@map("user_subscriptions")
}

model PostCategory {
  catId     String   @id @default(uuid()) @map("cat_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // relations
  Posts Post[]

  @@map("post_categories")
}

model Post {
  pId             String     @id @default(uuid()) @map("p_id")
  categoryId      String     @map("category_id")
  authorId        String     @map("author_id")
  pType           PostTypes  @default(NORMAL) @map("p_type")
  status          PostStatus @default(PENDING)
  title           String
  description     String
  priceRangeStart Decimal    @map("price_range_start")
  priceRangeEnd   Decimal    @map("price_range_end")
  location        String
  approvedBy      String?    @map("approved_by")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  //relations
  category        PostCategory @relation(fields: [categoryId], references: [catId])
  approvedByAdmin User?        @relation(name: "approved_by_admin", fields: [approvedBy], references: [id])
  author          User         @relation(name: "author", fields: [authorId], references: [id])
  votes           Votes[]
  Comments        Comments[]

  @@map("posts")
}

model Votes {
  vId       String    @id @default(uuid()) @map("v_id")
  postId    String    @map("post_id")
  voterId   String    @map("voter_id")
  vType     VoteTypes @map("v_type")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // relations
  post  Post @relation(fields: [postId], references: [pId])
  voter User @relation(name: "post_votes", fields: [voterId], references: [id])

  @@map("votes")
}

model Comments {
  cId         String   @id @default(uuid()) @map("c_id")
  postId      String   @map("post_id")
  commenterId String   @map("commenter_id")
  comment     String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // relations
  post      Post @relation(fields: [postId], references: [pId])
  commenter User @relation(name: "post_comments", fields: [commenterId], references: [id])

  @@map("comments")
}
